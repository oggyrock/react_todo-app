{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","uneditedTitles","setUneditedTitles","todoList","setTodoList","todo","index","list","className","completed","undefined","onDoubleClick","event","clickedTodo","target","id","title","closest","type","checked","onChange","onClick","splice","value","onKeyDown","key","TodoList","filteredList","map","TodosFilter","filter","setFilter","hidden","length","href","every","App","useState","setTitle","toggleAll","setToggleAll","newTodo","Date","useEffect","JSON","parse","localStorage","stringify","onSubmit","preventDefault","some","placeholder","trimLeft","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5ce8b8f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoItem({\n  uneditedTitles,\n  setUneditedTitles,\n  todoList,\n  setTodoList,\n  todo,\n  index,\n}) {\n  const list = [...todoList];\n\n  return (\n    <li\n      className={todo.completed ? 'completed' : undefined}\n      onDoubleClick={(event) => {\n        const clickedTodo = event.target;\n\n        setUneditedTitles({\n          ...uneditedTitles,\n          [todo.id]: todo.title,\n        });\n        clickedTodo.closest('li').className = 'editing';\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            list[index].completed = !todo.completed;\n            setTodoList([...todoList]);\n          }}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            todoList.splice(index, 1);\n            setTodoList([...todoList]);\n          }}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={todo.title}\n        onChange={(event) => {\n          list[index].title = event.target.value;\n          setTodoList([...todoList]);\n        }}\n        onKeyDown={(event) => {\n          const clickedTodo = event.target;\n\n          if (event.key === 'Enter') {\n            clickedTodo.closest('li').className\n              = todo.completed ? 'completed' : '';\n          }\n\n          if (event.key === 'Escape') {\n            list[index].title = uneditedTitles[todo.id];\n            setTodoList([...todoList]);\n            clickedTodo.closest('li').className\n              = todo.completed ? 'completed' : '';\n          }\n        }}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  setUneditedTitles: PropTypes.func.isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  uneditedTitles: PropTypes.shape(\n    PropTypes.string.isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport function TodoList({\n  filteredList,\n  setUneditedTitles,\n  uneditedTitles,\n  todoList,\n  setTodoList,\n}) {\n  return (\n    <ul className=\"todo-list\">\n      {filteredList.map((todo, index) => (\n        <TodoItem\n          key={todo.id}\n          uneditedTitles={uneditedTitles}\n          setUneditedTitles={setUneditedTitles}\n          todoList={todoList}\n          setTodoList={setTodoList}\n          todo={todo}\n          index={index}\n        />\n      ))}\n    </ul>\n  );\n}\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  filteredList: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  setUneditedTitles: PropTypes.func.isRequired,\n  uneditedTitles: PropTypes.shape().isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodosFilter({\n  todoList,\n  setTodoList,\n  filter,\n  setFilter,\n}) {\n  return (\n    <footer\n      className=\"footer\"\n      hidden={!todoList.length}\n    >\n      <span className=\"todo-count\">\n        {todoList.filter(todo => !todo.completed).length}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={filter === 'All' ? 'selected' : ''}\n            onClick={() => setFilter('All')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={filter === 'Active' ? 'selected' : ''}\n            onClick={() => setFilter('Active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={filter === 'Completed' ? 'selected' : ''}\n            onClick={() => setFilter('Completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        hidden={todoList.every(todo => !todo.completed)}\n        className=\"clear-completed\"\n        onClick={() => setTodoList(\n          [...todoList.filter(todo => !todo.completed)],\n        )}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodosFilter.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [uneditedTitles, setUneditedTitles] = useState({});\n  const [toggleAll, setToggleAll] = useState(true);\n  const [todoList, setTodoList] = useState([]);\n  const [filter, setFilter] = useState('All');\n  const filteredList = todoList.filter((todo) => {\n    if (filter === 'Active') {\n      return !todo.completed;\n    }\n\n    if (filter === 'Completed') {\n      return todo.completed;\n    }\n\n    return true;\n  });\n\n  const newTodo = {\n    id: +new Date(),\n    title,\n    completed: false,\n  };\n\n  useEffect(() => setTodoList(JSON.parse(localStorage.list)), []);\n\n  useEffect(() => {\n    localStorage.list = JSON.stringify(todoList);\n    setToggleAll(todoList.every(todo => todo.completed));\n  }, [todoList]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            title\n            && setTodoList([\n              newTodo,\n              ...todoList,\n            ]);\n            setTitle('');\n            setToggleAll(todoList.some(todo => !todo.completed));\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title.trimLeft()}\n            onChange={event => setTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toggleAll}\n          onChange={() => {\n            setToggleAll(!toggleAll);\n            todoList.map((todo, index) => {\n              todoList[index].completed = !toggleAll;\n\n              return { ...todo };\n            });\n            setTodoList([...todoList]);\n          }}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          hidden={!todoList.length}\n        >\n          Mark all as complete\n        </label>\n        <TodoList\n          filteredList={filteredList}\n          setUneditedTitles={setUneditedTitles}\n          uneditedTitles={uneditedTitles}\n          todoList={todoList}\n          setTodoList={setTodoList}\n        />\n      </section>\n      <TodosFilter\n        todoList={todoList}\n        setTodoList={setTodoList}\n        filter={filter}\n        setFilter={setFilter}\n      />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}