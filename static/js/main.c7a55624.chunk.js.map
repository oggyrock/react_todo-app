{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","uneditedTitles","setUneditedTitles","todoList","setTodoList","todo","index","list","className","completed","undefined","onDoubleClick","event","clickedTodo","target","id","title","closest","lastChild","focus","type","checked","onChange","onClick","splice","value","onKeyDown","key","onBlur","TodoList","filteredList","map","TodosFilter","filter","setFilter","hidden","length","href","every","App","useState","setTitle","toggleAll","setToggleAll","newTodo","Date","useEffect","localStorage","JSON","parse","stringify","onSubmit","preventDefault","some","placeholder","trimLeft","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7a55624.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoItem({\n  uneditedTitles,\n  setUneditedTitles,\n  todoList,\n  setTodoList,\n  todo,\n  index,\n}) {\n  const list = [...todoList];\n\n  return (\n    <li\n      className={todo.completed ? 'completed' : undefined}\n      onDoubleClick={(event) => {\n        const clickedTodo = event.target;\n\n        setUneditedTitles({\n          ...uneditedTitles,\n          [todo.id]: todo.title,\n        });\n        clickedTodo.closest('li').className = 'editing';\n        clickedTodo.closest('li').lastChild.focus();\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            const switchedTodo = todo;\n\n            switchedTodo.completed = !todo.completed;\n            setTodoList([...todoList]);\n          }}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            todoList.splice(index, 1);\n            setTodoList([...todoList]);\n          }}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={todo.title}\n        onChange={(event) => {\n          list[index].title = event.target.value;\n          setTodoList([...todoList]);\n        }}\n        onKeyDown={(event) => {\n          const clickedTodo = event.target;\n\n          if (event.key === 'Enter') {\n            if (!event.target.value) {\n              todoList.splice(index, 1);\n              setTodoList([...todoList]);\n            } else {\n              clickedTodo.closest('li').className\n                = todo.completed ? 'completed' : '';\n            }\n          }\n\n          if (event.key === 'Escape') {\n            list[index].title = uneditedTitles[todo.id];\n            setTodoList([...todoList]);\n            clickedTodo.closest('li').className\n              = todo.completed ? 'completed' : '';\n          }\n        }}\n        onBlur={({ target }) => {\n          const field = target;\n\n          field.closest('li').className\n            = todo.completed ? 'completed' : '';\n        }}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  setUneditedTitles: PropTypes.func.isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  uneditedTitles: PropTypes.shape(\n    PropTypes.string.isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport function TodoList({\n  filteredList,\n  setUneditedTitles,\n  uneditedTitles,\n  todoList,\n  setTodoList,\n}) {\n  return (\n    <ul className=\"todo-list\">\n      {filteredList.map((todo, index) => (\n        <TodoItem\n          key={todo.id}\n          uneditedTitles={uneditedTitles}\n          setUneditedTitles={setUneditedTitles}\n          todoList={todoList}\n          setTodoList={setTodoList}\n          todo={todo}\n          index={index}\n        />\n      ))}\n    </ul>\n  );\n}\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  filteredList: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  setUneditedTitles: PropTypes.func.isRequired,\n  uneditedTitles: PropTypes.shape().isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodosFilter({\n  todoList,\n  setTodoList,\n  filter,\n  setFilter,\n}) {\n  return (\n    <footer\n      className=\"footer\"\n      hidden={!todoList.length}\n    >\n      <span className=\"todo-count\">\n        {todoList.filter(todo => !todo.completed).length}\n        {' '}\n        item\n        {todoList.filter(todo => !todo.completed).length !== 1 ? 's ' : ' '}\n        left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={filter === 'All' ? 'selected' : ''}\n            onClick={() => setFilter('All')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={filter === 'Active' ? 'selected' : ''}\n            onClick={() => setFilter('Active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={filter === 'Completed' ? 'selected' : ''}\n            onClick={() => setFilter('Completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        hidden={todoList.every(todo => !todo.completed)}\n        className=\"clear-completed\"\n        onClick={() => setTodoList(\n          [...todoList.filter(todo => !todo.completed)],\n        )}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodosFilter.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [uneditedTitles, setUneditedTitles] = useState({});\n  const [toggleAll, setToggleAll] = useState(true);\n  const [todoList, setTodoList] = useState([]);\n  const [filter, setFilter] = useState('All');\n  const filteredList = todoList.filter((todo) => {\n    if (filter === 'Completed') {\n      return todo.completed;\n    }\n\n    if (filter === 'Active') {\n      return !todo.completed;\n    }\n\n    return true;\n  });\n\n  const newTodo = {\n    id: +new Date(),\n    title,\n    completed: false,\n  };\n\n  useEffect(\n    () => localStorage.list && setTodoList(JSON.parse(localStorage.list)),\n    [],\n  );\n\n  useEffect(() => {\n    localStorage.list = JSON.stringify(todoList);\n    setToggleAll(todoList.every(todo => todo.completed));\n  }, [todoList]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            if (title) {\n              setTodoList([\n                newTodo,\n                ...todoList,\n              ]);\n              setTitle('');\n              setToggleAll(todoList.some(todo => !todo.completed));\n            }\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={event => setTitle(event.target.value.trimLeft())}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toggleAll}\n          onChange={() => {\n            setToggleAll(!toggleAll);\n            todoList.map((todo, index) => {\n              todoList[index].completed = !toggleAll;\n\n              return { ...todo };\n            });\n            setTodoList([...todoList]);\n          }}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          hidden={!todoList.length}\n        >\n          Mark all as complete\n        </label>\n        <TodoList\n          filteredList={filteredList}\n          setUneditedTitles={setUneditedTitles}\n          uneditedTitles={uneditedTitles}\n          todoList={todoList}\n          setTodoList={setTodoList}\n        />\n      </section>\n      <TodosFilter\n        todoList={todoList}\n        setTodoList={setTodoList}\n        filter={filter}\n        setFilter={setFilter}\n      />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}