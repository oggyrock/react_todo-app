{"version":3,"sources":["App.js","index.js"],"names":["App","useState","title","setTitle","uneditedTitles","setUneditedTitles","toggleAll","setToggleAll","JSON","parse","localStorage","list","todoList","setTodoList","filter","setFilter","filteredList","todo","completed","newTodo","id","Date","useEffect","stringify","every","className","onSubmit","event","preventDefault","some","type","placeholder","value","trimLeft","onChange","target","checked","map","index","htmlFor","hidden","length","key","undefined","onDoubleClick","clickedTodo","closest","onClick","splice","onKeyDown","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f4f3dfa.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [uneditedTitles, setUneditedTitles] = useState({});\n  const [toggleAll, setToggleAll] = useState(true);\n  const [todoList, setTodoList] = useState(\n    JSON.parse(localStorage.list || '[]'),\n  );\n  const [filter, setFilter] = useState('All');\n  const filteredList = todoList.filter((todo) => {\n    if (filter === 'Active') {\n      return !todo.completed;\n    }\n\n    if (filter === 'Completed') {\n      return todo.completed;\n    }\n\n    return true;\n  });\n  const newTodo = {\n    id: +new Date(),\n    title,\n    completed: false,\n  };\n\n  useEffect(() => {\n    localStorage.list = JSON.stringify(todoList);\n    setToggleAll(todoList.every(todo => todo.completed));\n  }, [todoList]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            title\n            && setTodoList([\n              newTodo,\n              ...todoList,\n            ]);\n            setTitle('');\n            setToggleAll(todoList.some(todo => !todo.completed));\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title.trimLeft()}\n            onChange={event => setTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toggleAll}\n          onChange={() => {\n            setToggleAll(!toggleAll);\n            todoList.map((todo, index) => {\n              todoList[index].completed = !toggleAll;\n\n              return { ...todo };\n            });\n            setTodoList([...todoList]);\n          }}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          hidden={!todoList.length}\n        >\n          Mark all as complete\n        </label>\n\n        <ul className=\"todo-list\">\n          {filteredList.map((todo, index) => (\n            <li\n              hidden={todo.hidden}\n              key={todo.id}\n              className={todo.completed ? 'completed' : undefined}\n              onDoubleClick={(event) => {\n                const clickedTodo = event.target;\n\n                setUneditedTitles({\n                  ...uneditedTitles,\n                  [todo.id]: todo.title,\n                });\n                clickedTodo.closest('li').className = 'editing';\n              }}\n            >\n              <div className=\"view\">\n                <input\n                  type=\"checkbox\"\n                  className=\"toggle\"\n                  checked={todo.completed}\n                  onChange={() => {\n                    todoList[index].completed = !todo.completed;\n                    setTodoList([...todoList]);\n                  }}\n                />\n                <label>{todo.title}</label>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  onClick={() => {\n                    todoList.splice(index, 1);\n                    setTodoList([...todoList]);\n                  }}\n                />\n              </div>\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={todo.title}\n                onChange={(event) => {\n                  todoList[index].title = event.target.value;\n                  setTodoList([...todoList]);\n                }}\n                onKeyDown={(event) => {\n                  const clickedTodo = event.target;\n\n                  if (event.key === 'Enter') {\n                    clickedTodo.closest('li').className\n                      = todo.completed ? 'completed' : '';\n                  }\n\n                  if (event.key === 'Escape') {\n                    todoList[index].title = uneditedTitles[todo.id];\n                    setTodoList([...todoList]);\n                    clickedTodo.closest('li').className\n                      = todo.completed ? 'completed' : '';\n                  }\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <footer\n        className=\"footer\"\n        hidden={!todoList.length}\n      >\n        <span className=\"todo-count\">\n          {todoList.filter(todo => !todo.completed).length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={filter === 'All' ? 'selected' : ''}\n              onClick={() => setFilter('All')}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={filter === 'Active' ? 'selected' : ''}\n              onClick={() => setFilter('Active')}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={filter === 'Completed' ? 'selected' : ''}\n              onClick={() => setFilter('Completed')}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          hidden={todoList.every(todo => !todo.completed)}\n          className=\"clear-completed\"\n          onClick={() => setTodoList(\n            [...todoList.filter(todo => !todo.completed)],\n          )}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}